<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core"
	xmlns:xc="http://www.ibm.com/xsp/custom"
	xmlns:xe="http://www.ibm.com/xsp/coreex"
	pageTitle="Bootstrap4XPages | Do more with buttons">

	<xc:ccAppLayout>
	<xp:this.facets>
		<xp:div xp:key="facetMiddle">

			<legend>Do more with buttons: feedback and toggling</legend>

			<p>
				Bootstrap has a simple built-in method to automatically set a button to disabled and provide
				some feedback to the user. Click this button to see what I mean:
			</p>
			
			<p>
			
				<xp:button value="Get me a drink!" 
					id="button1" themeId="Button.Warning"
					onclick="$(this).button('loading');">
					<xp:this.attrs>
						<xp:attr name="data-loading-text" value="Your drink is being served"></xp:attr>
					</xp:this.attrs>
					<i class="glyphicon glyphicon-glass " />
					<xp:eventHandler event="onclick" submit="true" refreshMode="partial" refreshId="button1">
						<xp:this.action><![CDATA[#{javascript:java.lang.Thread.currentThread().sleep(2000);}]]></xp:this.action>
					</xp:eventHandler>
				</xp:button>
				
			</p>
			
			<p>
				Neat, right? Here's how to do it:
				<ul>
					<li>Add the &#160;<b>data-loading-text</b>&#160; attribute to the button. The value is the text that gets displayed when the user clicks the button.</li>
					<li>Add an onclick event to set the buttons state to loading.</li>
				</ul>
				
				The thing to watch out for is that the state has to be reset too after the process completes. One way to do that is to partial refresh
				the area that contains the button.
			</p>
			
			<p>
				And here's the code:
				
				<pre>&lt;xp:button value="Get me a drink!" id="button2" styleClass="btn btn-warning" onclick="$(this).button('loading');"&gt;
  &lt;xp:this.attrs&gt;
    &lt;xp:attr name="data-loading-text" value="Your drink is being served"&gt;&lt;/xp:attr&gt;
  &lt;/xp:this.attrs&gt;
  &lt;i class="glyphicon glyphicon-glass " /&gt;
&lt;/xp:button&gt;</pre>
				
			</p>
			
			<p>
				(the live button actually also has a &#160;<a href="http://linqed.eu/?p=411" target="_blank">simple server side script</a> &#160;that waits for 2 seconds before it's finished...)
			</p>
			
			<h4>A simple toggle button</h4>
			
			<p>
				You can also use standard Bootstrap buttons to create toggle button:
			</p>
			<p>
				<div class="row">
					<div class="span2">
						Turn the light:
					</div>
					<div class="btn-group span4" data-toggle="buttons-radio">
					  <xp:button styleClass="active">On</xp:button>
					  <xp:button>Off</xp:button>
					</div>
				</div>
			</p>
			
			<p>
				Or with a little styling:
				
				<div class="row">
					<div class="span2">
						Are you gonna use this?
					</div>
					
					<div id="switch" class="btn-group span4" data-toggle="buttons-radio">
					  <xp:button styleClass="btn-success active">Yes</xp:button>
					  <xp:button>No</xp:button>
					</div>
					
					<xp:scriptBlock id="scriptBlock1">
						<xp:this.value><![CDATA[$("#switch .btn").on("click", function() {
							$(this)
								.addClass("btn-success")
								.siblings()
									.removeClass("btn-success");
});
]]></xp:this.value>
					</xp:scriptBlock>


				</div>
				
			</p>
			<p>
			
				All that's needed is this little code snippet. The &#160;<b>data-toggle="buttons-radio"</b>&#160; is the important part here: it tells Bootstrap to 
				treat the buttons in the div as a group where you can only enable a single option. You can also set it to buttons-checkbox. Guess what that does...
			</p>
			
			<p>
				(by the way: the script block is only needed if you want to change the color of the active button)
			</p>
			
			<p>
			 
				
				<pre>&lt;div id="div1" class="btn-group span4" data-toggle="buttons-radio"&gt;
  &lt;xp:button styleClass="btn btn-success active"&gt;On&lt;/xp:button&gt;
  &lt;xp:button styleClass="btn"&gt;Off&lt;/xp:button&gt;
&lt;/div&gt;
					
&lt;xp:scriptBlock id="scriptBlock2"&gt;
  &lt;xp:this.value&gt;
    &lt;![CDATA[$("#switch .btn").on("click", function() {
      $(this)
        .addClass("btn-success")
        .siblings()
          .removeClass("btn-success");
      });
    ]]&gt;
  &lt;/xp:this.value&gt;
&lt;/xp:scriptBlock&gt;</pre>
				
			</p>
				

		</xp:div>

	</xp:this.facets>
	</xc:ccAppLayout>

</xp:view>
